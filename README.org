#+title:     Amazon recommendations test
#+author:    Ider Delzo

* Feature request:
- A customer needs us to integrate with Amazon, and they need a page in our app to view individual reviews and metadata.
- They want us to fetch the latest reviews from only the first 5 pages of these URLs:
  + https://www.amazon.com/Nespresso-Espresso-Machine-DeLonghi-INCLUDED/dp/B07YXMB9F9
  + https://www.amazon.com/Nespresso-DeLonghi-ENV150BAE-Espresso-Aeroccino/dp/B07YBVTM6F
  + https://www.amazon.com/Nespresso-CitiZ-Espresso-Machine-DeLonghi/dp/B01M68FHZ4
  + https://www.amazon.com/Nespresso-Lattissima-Original-Espresso-DeLonghi/dp/B005IOME0W
- The customer said these fields are important to them to see on the page, per review:
  + Review title
  + Review body
  + Date
  + Rating
  + Verified purchase
  + Any attributes (e.g. "Capacity")
- They also want to know the top 10 most frequent keywords across all the fetched reviews.

* Installation and usage:
** Using docker:
- create the environment file ==.env-docker== in the project root with this structure:
  #+begin_src text
RAINFOREST_API_URL="https://api.rainforestapi.com"
RAINFOREST_API_KEY="<api key>"
SQLALCHEMY_DATABASE_URI="postgresql://<user>:<pass>@db:5432/<database_name>"
REDIS_URL=redis://redis:6379
  #+end_src
- Run a ==docker-compose run web alembic upgrade head== in order to generate the database from the migration files
- Run the ==docker-compose up== and this will run the 4 services (database, redis server, web application and background worker)

** Using a local machine:
- create the environment file ==.env== in the project root with this structure:
  #+begin_src text
RAINFOREST_API_URL="https://api.rainforestapi.com"
RAINFOREST_API_KEY="<api key>"
SQLALCHEMY_DATABASE_URI="postgresql://<user>:<pass>@<postgres_server>:5432/<database_name>"
REDIS_URL=redis://<redis_server>:6379
  #+end_src
- Install poetry inside the machine
- In a poetry environment, generate the database from the migrations ==alembic upgrade head==
- Run a poetry shell for the web instance and run ==python manage.py runserver==
- Run a poetry shell for the worker instance and run ==python manage.py worker==

** Notes:
- You can avoid to use a .env file if you can set all the variables in the environment

* Architecture overview:
I imagine the architecture of this project with 2 microservices working together:
- One capturing the basic information of the product.
- Another capturing the reviews (page by page and getting the top 10 keywords)

With this approach we can get faster results and keep updating the reviews and keywords
as we are getting more results.

About the scoring, initially I thought about keeping the keywords inside the databases and getting the count of repetitions
using a many to many relationship with the product but this approach could not handle in large reviews or
with many API calls so I created a redis service in the middle that stores the count of each keyword per
product and retrieves the result with the product, this process will be in charge of the worker service
that works in the background

* Deliverables:

- mockup: https://www.figma.com/file/ALAnbJUkc8RMeJ0T2wSwB1/test-amazon-products?node-id=0%3A1
- (Temporary) live site: http://143.198.98.42:8000/docs
